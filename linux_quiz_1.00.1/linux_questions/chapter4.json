


{
    "chapters": [
        {
            "chapter": 4,
            "description": "Searching and Analyzing Text",
            "questions": [
                {
                    "number": 1,
                    "question": "The cat -E MyFile.txt command is entered, and at the end of every line displayed is a $. What does this indicate?",
                    "options": ["The text file has been corrupted somehow.", "The text file records end in the ASCII character NUL.", "The text file records end in the ASCII character LF.", "The text file records end in the ASCII character $.", "The text file records contain a $ at their end."],
                    "answer": "C",
                    "explanation": {
                        "C": "A text file record is considered to be a single file line that ends in a newline linefeed that is the ASCII character LF.",
                        "A": "The text file may have been corrupted, but this command does not indicate it.",
                        "B": "The text file records end in the ASCII character LF and not NUL or $.",
                        "D": "The text file records may very well contain a $ at their end, but you cannot tell by the situation description.",
                        "E": "The text file records may very well contain a $ at their end, but you cannot tell by the situation description."
                    }
                },
                {
                    "number": 2,
                    "question": "The cut utility often needs delimiters to process text records. Which of the following best describes a delimiter?",
                    "options": ["One or more characters that designate the beginning of a line in a record", "One or more characters that designate the end of a line in a record", "One or more characters that designate the end of a text file to a command-line text processing utility", "A single space or a colon (:) that creates a boundary between different data items in a record", "One or more characters that create a boundary between different data items in a record"],
                    "answer": "E",
                    "explanation": {
                        "E": "One or more characters that create a boundary between different data items within a record.",
                        "A": "Option A is made up and is a wrong answer.",
                        "B": "Option B describes an end-of-line character, such as the ASCII LF.",
                        "C": "Option C is made up and is a wrong answer.",
                        "D": "While a single space and a colon can be used as a delimiter, option D is not the best answer."
                    }
                },
                {
                    "number": 3,
                    "question": "Which of the following utilities change text within a file? (Choose all that apply.)",
                    "options": ["cut", "sort", "vim", "nano", "sed"],
                    "answer": ["C", "D"],
                    "explanation": {
                        "C": "The only utilities that allow you to modify text are the text editors vim and nano.",
                        "D": "The only utilities that allow you to modify text are the text editors vim and nano.",
                        "A": "The cut utility does not modify the text within a file.",
                        "B": "The sort utility does not modify the text within a file.",
                        "E": "The sed utility does not modify the text within a file."
                    }
                },
                {
                    "number": 4,
                    "question": "You have a text file, monitor.txt, which contains information concerning the monitors used within the data center. Each record ends with the ASCII LF character and fields are delimitated by a comma (,). To display each data center monitor's monitor ID, serial number, and location, you'd use which cut command?",
                    "options": ["cut -d \",\" -f 1,3,4 monitor.txt", "cut -z -d \",\" -f 1,3,4 monitor.txt", "cut -f \",\" -d 1,3,4 monitor.txt", "cut monitor.txt -d \",\" -f 1,3,4", "cut monitor.txt -f \",\" -d 1,3,4"],
                    "answer": "A",
                    "explanation": {
                        "A": "The correct command is cut -d \",\" -f 1,3,4 monitor.txt.",
                        "B": "Option B uses the unneeded -z option.",
                        "C": "Option C is incorrect because it reverses the -f and -d options.",
                        "D": "Options D is incorrect because it puts the filename before the command switches.",
                        "E": "Option E is incorrect because it puts the filename before the command switches."
                    }
                },
                {
                    "number": 5,
                    "question": "The grep utility can employ regular expressions in its PATTERN. Which of the following best describes a regular expression?",
                    "options": ["A series of characters you define for a utility, which uses the characters to match the same characters in text files", "ASCII characters, such as LF and NUL, that a utility uses to filter text", "Wildcard characters, such as * and ?, that a utility uses to filter text", "A pattern template you define for a utility, which uses the pattern to filter text", "Quotation marks (single or double) used around characters to prevent unexpected results"],
                    "answer": "D",
                    "explanation": {
                        "D": "A regular expression is a pattern template you define for a utility.",
                        "A": "While you may use a series of characters in a grep PATTERN, they are not called regular expressions.",
                        "B": "B describes end-of-line characters, not regular expression characters.",
                        "C": "While the ? is used in basic regular expressions, the * is not.",
                        "E": "Quotation marks may be employed but are not considered regular expression characters."
                    }
                },
                {
                    "number": 6,
                    "question": "You are a system administrator on a Red Hat Linux server. You need to view records in the /var/log/messages file that start with the date May 30 and end with the IPv4 address 192.168.10.42. Which of the following is the best grep command to use?",
                    "options": ["grep \"May 30?192.168.10.42\" /var/log/messages", "grep \"May 30.*192.168.10.42\" /var/log/messages", "grep -i \"May 30.*192.168.10.42\" /var/log/messages", "grep -i \"May 30?192.168.10.42\" /var/log/messages", "grep -v \"May 30.*192.168.10.42\" /var/log/messages"],
                    "answer": "B",
                    "explanation": {
                        "B": "This command employs the correct syntax.",
                        "A": "Option A uses the wrong regular expression of ?.",
                        "C": "Option C employs the -i switch unnecessarily.",
                        "D": "Option D employs the -i switch unnecessarily.",
                        "E": "Option E uses the -v switch, which displays text records that do not match the PATTERN."
                    }
                },
                {
                    "number": 7,
                    "question": "Which of the following is a BRE pattern that could be used with the grep command? (Choose all that apply.)",
                    "options": ["Sp?ce", "\"Space, the .*frontier\"", "^Space", "(lasting | final)", "frontier$"],
                    "answer": ["A", "B", "C", "E"],
                    "explanation": {
                        "A": "A BRE is a basic regular expression that describes certain patterns.",
                        "B": "A BRE is a basic regular expression that describes certain patterns.",
                        "C": "A BRE is a basic regular expression that describes certain patterns.",
                        "E": "A BRE is a basic regular expression that describes certain patterns.",
                        "D": "The only ERE is in option D."
                    }
                },
                {
                    "number": 8,
                    "question": "You need to search through a large text file and find any record that contains either Luke or Laura at the record's beginning. Also, the phrase Father is must be located somewhere in the record's middle. Which of the following is an ERE pattern that could be used with the egrep command to find this record?",
                    "options": ["\"Luke$|Laura$.Father is\"", "^Luke|^Laura.Father is", "(^Luke|^Laura).Father is", "(Luke$|Laura$). Father is$", "(^Luke|^Laura).Father is."],
                    "answer": "C",
                    "explanation": {
                        "C": "Option C is correct for the search requirements.",
                        "A": "Option A will return records that end with Luke or Laura.",
                        "B": "Option B will return records that begin with Luke or Laura and has one character between Laura and the Father is phrase.",
                        "D": "Option D will try to return records that end with Luke or Laura and contain the Father is phrase.",
                        "E": "Option E will return records with conditions that do not meet the search requirements."
                    }
                },
                {
                    "number": 9,
                    "question": "A file data.txt needs to be sorted numerically and its output saved to a new file newdata.txt. Which of the following commands can accomplish this task? (Choose all that apply.)",
                    "options": ["sort -n -o newdata.txt data.txt", "sort -n data.txt > newdata.txt", "sort -n -o data.txt newdata.txt", "sort -o newdata.txt data.txt", "sort data.txt > newdata.txt"],
                    "answer": ["A", "B"],
                    "explanation": {
                        "A": "Option A uses the -n and -o switches correctly.",
                        "B": "Option B uses the -n switch correctly.",
                        "C": "Option C is incorrect because it has the newdata.txt and data.txt flipped.",
                        "D": "Option D is incorrect because it does not use the -n switch.",
                        "E": "Option E is incorrect because it does not use the -n switch."
                    }
                },
                {
                    "number": 10,
                    "question": "Which of the following commands can display the data.txt and datatoo.txt files' content one after the other to STDOUT? (Choose all that apply.)",
                    "options": ["ls data.txt datatoo.txt", "sort -n data.txt > datatoo.txt", "cat -n data.txt datatoo.txt", "ls -l data.txt datatoo.txt", "sort data.txt datatoo.txt"],
                    "answer": ["C", "E"],
                    "explanation": {
                        "C": "The command will append line numbers and concatenate the files' content to STDOUT.",
                        "E": "The command will concatenate the files' content to STDOUT.",
                        "A": "Option A will just display the files' names to STDOUT.",
                        "B": "Option B will sort data.txt and overwrite datatoo.txt.",
                        "D": "Option D will show the files' metadata to STDOUT instead of their contents."
                    }
                },
                {
                    "number": 11,
                    "question": "A text file, StarGateAttacks.txt, needs to be specially formatted for review. Which of the following commands is the best command to accomplish this task quickly?",
                    "options": ["printf", "wc", "pr", "paste", "nano"],
                    "answer": "C",
                    "explanation": {
                        "C": "The pr command is best suited for formatting a text file quickly.",
                        "A": "The printf command is not geared towards formatting entire text files.",
                        "B": "The wc command does not format text file contents.",
                        "D": "The paste command does not format text files the desired way.",
                        "E": "The nano text editor would require manual formatting."
                    }
                },
                {
                    "number": 12,
                    "question": "You need to format the string 42.777 into the correct two-digit floating number. Which of the following printf command FORMAT settings is the correct one to use?",
                    "options": ["\"%s\\n\"", "\"%.2s\\n\"", "\"%d\\n\"", "\"%.2c\\n\"", "\"%.2f\\n\""],
                    "answer": "E",
                    "explanation": {
                        "E": "The correct FORMAT setting is \"%.2f\\n\".",
                        "A": "Option A simply outputs 42.777.",
                        "B": "Option B will output 42.",
                        "C": "Option C will produce an error.",
                        "D": "Option D will display 42 and is incorrect."
                    }
                },
                {
                    "number": 13,
                    "question": "A Unicode-encoded text file, MyUCode.txt, needs to be perused. Before you decide what utility to use in order view the file's contents, you employ the wc command on it. This utility displays 2020 6786 11328 to STDOUT. Which of the following is true? (Choose all that apply.)",
                    "options": ["The file has 2,020 lines in it.", "The file has 2,020 characters in it.", "The file has 6,786 words in it.", "The file has 11,328 characters in it.", "The file has 11,328 lines in it."],
                    "answer": ["A", "C"],
                    "explanation": {
                        "A": "The first item output by the wc utility is the number of lines.",
                        "C": "The second item output by the wc utility is the number of words.",
                        "B": "Option B is incorrect because the file contains 2,020 lines, not characters.",
                        "D": "Option D is incorrect because you do not know about the Unicode encoding.",
                        "E": "Option E is incorrect because the file has 2,020 lines."
                    }
                },
                {
                    "number": 14,
                    "question": "Which of the following best defines a file descriptor?",
                    "options": ["A letter that represents the file's type", "A number that represents a process's open files", "Another term for the file's name", "A six-character name that represents standard output", "A symbol that indicates the file's classification"],
                    "answer": "B",
                    "explanation": {
                        "B": "A file descriptor is a number that represents a process's open files.",
                        "A": "Option A is a wrong answer.",
                        "C": "Option C is incorrect, as it is a made-up answer.",
                        "D": "Option D describes only STDOUT.",
                        "E": "Option E is incorrect as it describes a file indicator code."
                    }
                },
                {
                    "number": 15,
                    "question": "By default, STDOUT goes to what item?",
                    "options": ["/dev/tty n , where n is a number", "/dev/null", ">", "/dev/tty", "pwd"],
                    "answer": "D",
                    "explanation": {
                        "D": "By default, STDOUT goes to your current terminal, represented by /dev/tty.",
                        "A": "Option A may represent a particular terminal but is incorrect as a default.",
                        "C": "Option C is incorrect because it redirects STDOUT.",
                        "E": "Option E displays your present working directory."
                    }
                },
                {
                    "number": 16,
                    "question": "Which of the following commands will display the file SpaceOpera.txt to output as well as save a copy of it to the file SciFi.txt?",
                    "options": ["cat SpaceOpera.txt | tee SciFi.txt", "cat SpaceOpera.txt > SciFi.txt", "cat SpaceOpera.txt 2> SciFi.txt", "cp SpaceOpera.txt SciFi.txt", "cat SpaceOpera.txt > SciFi.txt"],
                    "answer": "A",
                    "explanation": {
                        "A": "Option A will display the file and save a copy.",
                        "B": "Option B will only save a copy to SciFi.txt.",
                        "C": "Option C will direct error messages to SciFi.txt.",
                        "D": "The cp command will only copy the file and not display it.",
                        "E": "Option E will only save a copy."
                    }
                },
                {
                    "number": 17,
                    "question": "Which of the following commands will put any generated error messages into the black hole?",
                    "options": ["sort SpaceOpera.txt 2> BlackHole", "sort SpaceOpera.txt > BlackHole", "sort SpaceOpera.txt > BlackHole", "sort SpaceOpera.txt 2> /dev/null", "sort SpaceOpera.txt > /dev/null"],
                    "answer": "D",
                    "explanation": {
                        "D": "The command redirects STDERR into /dev/null.",
                        "A": "Options A, B, and C redirect to a file called BlackHole.",
                        "E": "Option E redirects STDOUT to /dev/null, showing error messages."
                    }
                },
                {
                    "number": 18,
                    "question": "Which of the following commands will determine how many records in the file Problems.txt contain the word error?",
                    "options": ["grep error Problems.txt | wc -b", "grep error Problems.txt | wc -w", "grep error Problems.txt | wc -l", "grep Problems.txt error | wc -w", "grep Problems.txt error | wc -l"],
                    "answer": "C",
                    "explanation": {
                        "C": "The command counts the records containing the word error.",
                        "A": "Option A counts bytes, not records.",
                        "B": "Option B counts words, not records.",
                        "D": "Option D has incorrect syntax.",
                        "E": "Option E has incorrect syntax."
                    }
                },
                {
                    "number": 19,
                    "question": "You want to find any file named 42.tmp, which exists somewhere in your current directory's tree structure and display its contents to STDOUT. Which of the following will allow you to build a command to do this? (Choose all that apply.)",
                    "options": ["xargs (find . -name 42.tmp) cat", "cat find . -name 42.tmp", "cat $(find . -name 42.tmp)", "cat {find . -name 42.tmp}", "find . -name 42.tmp | xargs cat"],
                    "answer": ["C", "E"],
                    "explanation": {
                        "C": "Option C uses the correct syntax.",
                        "E": "Option E uses the correct syntax.",
                        "A": "Option A uses the wrong syntax.",
                        "B": "Option B uses the wrong syntax.",
                        "D": "Option D uses the wrong syntax."
                    }
                },
                {
                    "number": 20,
                    "question": "You want to edit the file SpaceOpera.txt and decide to use the vim editor to complete this task. Which of the following are vim modes you might employ? (Choose all that apply.)",
                    "options": ["Insert", "Change", "Command", "Ex", "Edit"],
                    "answer": ["A", "C", "D"],
                    "explanation": {
                        "A": "Insert mode allows for text input.",
                        "C": "Command mode allows for command input.",
                        "D": "Ex mode includes colon commands.",
                        "B": "Option B is incorrect.",
                        "E": "Option E is incorrect."
                    }
                }
            ]
        }
    ]
}
